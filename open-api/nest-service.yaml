---
openapi: 3.0.0
paths:
  /api:
    get:
      operationId: AppController_getHello
      parameters: []
      responses:
        '200':
          description: ''
  /api/auth/register:
    post:
      operationId: AuthController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: User register response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - auth
  /api/auth/login:
    post:
      operationId: AuthController_login
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginUserDto'
      responses:
        '200':
          description: User login response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponseDto'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - auth
  /api/auth:
    get:
      operationId: AuthController_findAll
      parameters: []
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - auth
  /api/auth/{id}:
    get:
      operationId: AuthController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - auth
    patch:
      operationId: AuthController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserDto'
      responses:
        '200':
          description: User update response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - auth
    delete:
      operationId: AuthController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - auth
  /api/auth/validate-email/{token}:
    get:
      operationId: AuthController_validateEmail
      parameters:
        - name: token
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: ''
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - auth
  /api/products:
    post:
      operationId: ProductsController_create
      # parameters:
      #   - name: Authorization
      #     required: true
      #     in: header
      #     schema:
      #       type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductDto'
      responses:
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        default:
          description: Create a product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      tags:
        - products
    get:
      operationId: ProductsController_findAll
      parameters:
        - name: limit
          required: true
          in: query
          schema:
            type: number
        - name: page
          required: true
          in: query
          schema:
            type: number
        - name: search
          required: true
          in: query
          schema:
            type: string
      responses:
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        default:
          description: The products record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDto'
      tags:
        - products
  /api/products/{id}:
    get:
      operationId: ProductsController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        default:
          description: Get a product
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Product'
      tags:
        - products
    patch:
      operationId: ProductsController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductDto'
      responses:
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        default:
          description: Get a product
          content:
            application/json:
              schema:
                type: object
      tags:
        - products
    delete:
      operationId: ProductsController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        default:
          description: Delete a product
          content:
            application/json:
              schema:
                type: object
      tags:
        - products
  /api/notifications:
    get:
      operationId: NotificationsController_allNotifications
      parameters:
        - name: limit
          required: true
          in: query
          schema:
            type: number
        - name: page
          required: true
          in: query
          schema:
            type: number
        - name: search
          required: true
          in: query
          schema:
            type: string
      responses:
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        default:
          description: The notifications record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDto'
      tags:
        - notifications
    patch:
      operationId: NotificationsController_updateNotifications
      parameters: []
      responses:
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        default:
          description: Update notification state
          content:
            application/json:
              schema:
                type: number
      tags:
        - notifications
  /api/notifications/notReadNotifications:
    get:
      operationId: NotificationsController_getNotReadNotifications
      parameters: []
      responses:
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        default:
          description: Not read notifications number
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/NotificationEntity'
      tags:
        - notifications
  /api/categories:
    post:
      operationId: CategoriesController_create
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryDto'
      responses:
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        default:
          description: Create category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
      tags:
        - categories
    get:
      operationId: CategoriesController_findAll
      parameters:
        - name: limit
          required: true
          in: query
          schema:
            type: number
        - name: page
          required: true
          in: query
          schema:
            type: number
        - name: search
          required: true
          in: query
          schema:
            type: string
      responses:
        '200':
          description: The categories record
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedResponseDto'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - categories
  /api/categories/{id}:
    get:
      operationId: CategoriesController_findOne
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Get a category
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - categories
    patch:
      operationId: CategoriesController_update
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryDto'
      responses:
        '200':
          description: Update a category
          content:
            application/json:
              schema:
                type: object
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - categories
    delete:
      operationId: CategoriesController_remove
      parameters:
        - name: id
          required: true
          in: path
          schema:
            type: string
      responses:
        '200':
          description: Delete a category
          content:
            application/json:
              schema:
                type: object
        '400':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
        '401':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponseDto'
      tags:
        - categories
info:
  title: Mi Api documentation
  description: Esta es una Api
  version: '1.0'
  contact: {}
tags:
  - name: auth
    description: ''
  - name: products
    description: ''
servers: []
components:
  securitySchemes:
    basic:
      type: http
      scheme: basic
  schemas:
    ErrorResponseDto:
      type: object
      properties:
        message:
          type: string
        error:
          type: string
        statusCode:
          type: number
      required:
        - message
        - error
        - statusCode
    User:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        isActive:
          type: boolean
        emailValidated:
          type: boolean
        password:
          type: string
        img:
          type: string
        role:
          type: array
          items:
            type: string
      required:
        - name
        - email
        - isActive
        - emailValidated
        - password
        - img
        - role
    LoginResponseDto:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
      required:
        - token
        - user
    CreateUserDto:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
      required:
        - name
        - email
        - password
    LoginUserDto:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
      required:
        - email
        - password
    UpdateUserDto:
      type: object
      properties: {}
    PageDto:
      type: object
      properties:
        number:
          type: number
        limit:
          type: number
        total:
          type: number
        next:
          type: string
        prev:
          type: string
      required:
        - number
        - limit
        - total
        - next
        - prev
    PaginatedResponseDto:
      type: object
      properties:
        page:
          $ref: '#/components/schemas/PageDto'
        content:
          type: array
          items:
            type: string
      required:
        - page
        - content
    Product:
      type: object
      properties:
        name:
          type: string
        available:
          type: boolean
        price:
          type: number
        description:
          type: string
        user:
          type: string
        category:
          type: string
      required:
        - name
        - available
        - price
        - description
        - user
        - category
    CreateProductDto:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        description:
          type: string
      required:
        - name
        - price
        - description
    UpdateProductDto:
      type: object
      properties:
        name:
          type: string
        price:
          type: number
        description:
          type: string
        available:
          type: boolean
      required:
        - available
    NotificationEntity:
      type: object
      properties: {}
    Category:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        available:
          type: boolean
      required:
        - name
        - description
        - available
    CreateCategoryDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
      required:
        - name
        - description
    UpdateCategoryDto:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        available:
          type: boolean
      required:
        - available